LIBRARY ieee;
USE ieee.std_logic_1164.all;
use ieee.numeric_std.all;

ENTITY ULA IS
	PORT(
		A: IN std_logic_vector (7 downto 0);
		B: IN std_logic_vector (7 downto 0);
		ALUop: IN std_logic;
		clk: IN BIT;
		Result: OUT std_logic_vector (7 downto 0);
		Zero: OUT std_logic;
		Overflow: OUT std_logic
		);
END ENTITY;

ARCHITECTURE ALU_arch of ALU IS
	COMPONENT ripple_carry
		PORT(
			Rj: IN std_logic_vector (7 downto 0);
			Rk: IN std_logic_vector (7 downto 0);
			Ri: OUT std_logic_vector (7 downto 0);
			Cout: OUT std_logic
		);
	END COMPONENT;
		
	SIGNAL S_AND: std_logic_vector (7 downto 0);
	SIGNAL S_OR: std_logic_vector (7 downto 0);
	SIGNAL Bsig: std_logic_vector (7 downto 0);
	SIGNAL Sgen: std_logic_vector (7 downto 0);
	SIGNAL Ovf: std_logic;
	
BEGIN

	PROCESS (clk) BEGIN
		IF clk'EVENT AND clk = '1' THEN
			IF ALUop = '1' THEN 
				Bsig <= B;
			ELSE 
				Bsig <= std_logic_vector( unsigned(NOT B) + 1);
			END IF;
		END IF;
	END PROCESS;
	
	SOMADOR1: ripple_carry PORT MAP(A,Bsig,Sgen,Ovf);
	PROCESS(clk) IS BEGIN
		IF clk'EVENT AND clk = '1' THEN
			IF ALUop = '0' THEN
				Result <= S_AND;
				Overflow <= '0';
				Zero <= (NOT (S_AND(0) OR S_AND(1) OR S_AND(2) OR S_AND(3) OR S_AND(4) OR S_AND(5) OR S_AND(6) OR S_AND(7)));
			ELSE ALUop = '1' THEN
				Result <= S_OR;
				Overflow <= '0';
				Zero <= (NOT (S_OR(0) OR S_OR(1) OR S_OR(2) OR S_OR(3) OR S_OR(4) OR S_OR(5) OR S_OR(6) OR S_OR(7)));
			END IF;
		END IF;
	END PROCESS;
END ARCHITECTURE;